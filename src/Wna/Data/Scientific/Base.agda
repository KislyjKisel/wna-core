{-# OPTIONS --without-K --safe #-}

module Wna.Data.Scientific.Base where

open import Data.Nat.Divisibility                 as ‚Ñï using ()
open import Data.Product                               using (Œ£; proj‚ÇÅ; proj‚ÇÇ; _√ó_; _,_)
open import Data.Sum.Base                         as ‚äé using (inj‚ÇÅ; inj‚ÇÇ; _‚äé_) 
open import Function.Base                              using (it; _$_)
open import Relation.Binary.Definitions                using (tri<; tri‚âà; tri>)
open import Relation.Binary.PropositionalEquality as ‚â° using (_‚â°_; _‚â¢_)
open import Relation.Nullary.Negation                  using (contradiction)
open import Wna.Data.Integer.Base                 as ‚Ñ§ using (‚Ñ§)
open import Wna.Data.Integer.Properties           as ‚Ñ§ using ()
open import Wna.Data.Nat.Base                     as ‚Ñï using (‚Ñï)
open import Wna.Data.Nat.Properties               as ‚Ñï using ()
open import Wna.Primitive

record Scientific {base : ‚Ñï} (base‚â•2 : base ‚Ñï.‚â• 2) : Type where
    no-eta-equality
    pattern
    constructor mkScientific
    field
        significand   : ‚Ñ§
        exponent      : ‚Ñ§
        .normalized   : ‚¶É _ : ‚Ñ§.NonZero significand ‚¶Ñ ‚Üí base ‚Ñï.‚à§ ‚Ñ§.‚à£ significand ‚à£
        .normalized-0 : significand ‚â¢ ‚Ñ§.0‚Ñ§ ‚äé exponent ‚â° ‚Ñ§.0‚Ñ§

0ùïä : ‚àÄ{base} {base‚â•2 : base ‚Ñï.‚â• 2} ‚Üí Scientific base‚â•2
0ùïä = mkScientific ‚Ñ§.0‚Ñ§ ‚Ñ§.0‚Ñ§ (Œª ‚¶É znz ‚¶Ñ ‚Üí contradiction ‚â°.refl $ ‚Ñï.‚â¢-nonZero‚Åª¬π _ ‚¶É znz ‚¶Ñ) (inj‚ÇÇ ‚â°.refl)

1ùïä : ‚àÄ{base} {base‚â•2 : base ‚Ñï.‚â• 2} ‚Üí Scientific base‚â•2
1ùïä {base‚â•2 = b‚â•2} = mkScientific ‚Ñ§.1‚Ñ§ ‚Ñ§.0‚Ñ§ (Œª b‚à£1 ‚Üí ‚Ñï.1+n‚â∞n {1} (‚â°.subst (2 ‚Ñï.‚â§_) (‚Ñï.‚à£1‚áí‚â°1 b‚à£1) b‚â•2)) (inj‚ÇÅ Œª())

Scientific‚ÇÇ : Type
Scientific‚ÇÇ = Scientific {2} $ ‚Ñï.s‚â§s $ ‚Ñï.s‚â§s ‚Ñï.z‚â§n

Scientific‚ÇÅ‚ÇÄ : Type
Scientific‚ÇÅ‚ÇÄ = Scientific {10} $ ‚Ñï.s‚â§s $ ‚Ñï.s‚â§s ‚Ñï.z‚â§n

open Scientific public
    using (significand; exponent)

-_ : ‚àÄ{base} {base‚â•2 : base ‚Ñï.‚â• 2} ‚Üí Scientific base‚â•2 ‚Üí Scientific base‚â•2
-_ {base} (mkScientific c e p1 p2) = mkScientific (‚Ñ§.- c) e (‚â°.subst (base ‚Ñï.‚à§_) (‚â°.sym $ ‚Ñ§.‚à£-i‚à£‚â°‚à£i‚à£ c) $ p1 ‚¶É ‚â°.subst ‚Ñï.NonZero (‚Ñ§.‚à£-i‚à£‚â°‚à£i‚à£ c) it ‚¶Ñ) (‚äé.map‚ÇÅ (Œª c‚â¢0 -c‚â°0 ‚Üí c‚â¢0 (‚Ñ§.neg-injective -c‚â°0)) p2)

private
    normalizePositive' : ‚àÄ{base} {base‚â•2 : base ‚Ñï.‚â• 2} (c : ‚Ñï) ‚Üí ‚¶É _ : ‚Ñï.NonZero c ‚¶Ñ ‚Üí ‚Ñ§ ‚Üí Scientific base‚â•2
    normalizePositive' {b} {b‚â•2} c e = aux c (‚Ñï.log c b‚â•2) ‚â°.refl
        where
        aux : (c : ‚Ñï) ‚Üí ‚¶É _ : ‚Ñï.NonZero c ‚¶Ñ ‚Üí (l : ‚Ñï √ó Œ£ ‚Ñï (b ‚Ñï.‚à§_)) ‚Üí ‚Ñï.log c b‚â•2 ‚â° l ‚Üí Scientific b‚â•2
        aux c (de , rx , p) s = mkScientific (‚Ñ§.+ rx) (‚Ñï.iterate de ‚Ñ§.suc e) p (inj‚ÇÅ $ Œª rx‚â°0 ‚Üí (‚â°.subst (Œª t ‚Üí proj‚ÇÅ (proj‚ÇÇ t) ‚â¢ 0) s $ ‚Ñï.log-rem‚â¢0 c {b} {b‚â•2}) $ ‚Ñ§.+-injective rx‚â°0)

normalize : ‚àÄ{base} {base‚â•2 : base ‚Ñï.‚â• 2} ‚Üí ‚Ñ§ ‚Üí ‚Ñ§ ‚Üí Scientific base‚â•2
normalize c e with ‚Ñ§.<-cmp c (‚Ñ§.+ 0)
... | tri< < ‚ââ ‚âØ = - (normalizePositive' ‚Ñ§.‚à£ c ‚à£ ‚¶É ‚Ñï.‚â¢-nonZero $ ‚Ñ§.i‚â¢0‚áí‚à£i‚à£‚â¢0 c ‚ââ ‚¶Ñ e)
... | tri‚âà ‚âÆ ‚âà ‚âØ = 0ùïä
... | tri> ‚âÆ ‚ââ > = normalizePositive' ‚Ñ§.‚à£ c ‚à£ ‚¶É ‚Ñï.‚â¢-nonZero $ ‚Ñ§.i‚â¢0‚áí‚à£i‚à£‚â¢0 c ‚ââ ‚¶Ñ e
