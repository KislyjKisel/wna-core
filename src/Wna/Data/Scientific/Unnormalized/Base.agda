{-# OPTIONS --without-K --safe #-}

module Wna.Data.Scientific.Unnormalized.Base where

open import Data.Integer.Base        as ‚Ñ§   using (‚Ñ§)
open import Data.Integer.Properties  as ‚Ñ§   using ()
open import Wna.Data.Nat.Base        as ‚Ñï   using (‚Ñï)
open import Wna.Data.Nat.Properties  as ‚Ñï   using ()
open import Wna.Data.Scientific.Base as Sci using (Scientific)
open import Data.Float.Base          as Flt using (Float)
open import Data.Maybe.Base          as Mb  using (Maybe)
open import Data.Product             as Œ£   using (Œ£; proj‚ÇÅ; _√ó_; _,_)
open import Function.Base                   using (_‚àò‚Ä≤_; _$_)
open import Relation.Nullary using (yes; no)
open import Wna.Primitive
open import Data.Nat.Divisibility as ‚Ñï using ()
open import Relation.Binary.Definitions                using (tri<; tri‚âà; tri>)
open import Relation.Nullary using (yes; no)
open import Data.String.Base as Str using (String)
open import Data.List.Base as List using (List)
open import Data.Char.Base using (Char)

record Scientific·µò {base : ‚Ñï} (base‚â•2 : base ‚Ñï.‚â• 2) : Type where
    no-eta-equality
    pattern
    constructor mkScientific·µò
    field
        significand exponent : ‚Ñ§

open Scientific·µò public
    using (significand; exponent)

-- todo: easy specialization of type to any base using decidable `2 ‚â§? base`
-- todo: to, from: ‚Ñ§, ‚Ñï, ‚Ñö

0ùïä·µò : ‚àÄ{base} {base‚â•2 : base ‚Ñï.‚â• 2} ‚Üí Scientific·µò base‚â•2
0ùïä·µò = mkScientific·µò ‚Ñ§.0‚Ñ§ ‚Ñ§.0‚Ñ§

1ùïä·µò : ‚àÄ{base} {base‚â•2 : base ‚Ñï.‚â• 2} ‚Üí Scientific·µò base‚â•2
1ùïä·µò = mkScientific·µò ‚Ñ§.1‚Ñ§ ‚Ñ§.0‚Ñ§

Scientific·µò‚ÇÇ : Type
Scientific·µò‚ÇÇ = Scientific·µò {2} $ ‚Ñï.s‚â§s $ ‚Ñï.s‚â§s ‚Ñï.z‚â§n

Scientific·µò‚ÇÅ‚ÇÄ : Type
Scientific·µò‚ÇÅ‚ÇÄ = Scientific·µò {10} $ ‚Ñï.s‚â§s $ ‚Ñï.s‚â§s ‚Ñï.z‚â§n

-- private
--     aux : ‚àÄ{b‚ÇÅ} {b‚ÇÅ‚â•2 : b‚ÇÅ ‚Ñï.‚â• 2} {b‚ÇÇ} ‚Üí (b‚ÇÇ‚â•2 : b‚ÇÇ ‚Ñï.‚â• 2) ‚Üí ‚Ñï ‚Üí ‚Ñ§ ‚Üí Scientific·µò b‚ÇÇ‚â•2
--     aux x = x
--         where
--         ‚à£x‚à£ : ‚Ñï
--         ‚à£x‚à£ = ‚Ñ§.‚à£ x ‚à£
--         xlogb‚ÇÇ : ‚Ñï √ó ‚Ñï
--         xlogb‚ÇÇ = Œ£.map‚ÇÇ proj‚ÇÅ $ ‚Ñï.log ‚à£x‚à£ ‚¶É {!   !} ‚¶Ñ {!   !}

-- rebase : ‚àÄ{b‚ÇÅ} {b‚ÇÅ‚â•2 : b‚ÇÅ ‚Ñï.‚â• 2} {b‚ÇÇ} ‚Üí (b‚ÇÇ‚â•2 : b‚ÇÇ ‚Ñï.‚â• 2) ‚Üí Scientific·µò b‚ÇÅ‚â•2 ‚Üí Scientific·µò b‚ÇÇ‚â•2
-- rebase {b‚ÇÅ} {b‚ÇÅ‚â•2} {b‚ÇÇ} b‚ÇÇ‚â•2 (mkScientific·µò x e) with ‚Ñ§.<-cmp x (‚Ñ§.+ 0)
-- ... | tri‚âà ‚âÆ ‚âà ‚âØ = 0ùïä·µò
-- ... | tri< < ‚ââ ‚âØ = {!   !}
-- ... | tri> ‚âÆ ‚ââ > = {!   !}

-_ : ‚àÄ{base} {base‚â•2 : base ‚Ñï.‚â• 2} ‚Üí Scientific·µò base‚â•2 ‚Üí Scientific·µò base‚â•2
-_ (mkScientific·µò c e) = mkScientific·µò (‚Ñ§.- c) e 

normalize : ‚àÄ{base} {base‚â•2 : base ‚Ñï.‚â• 2} ‚Üí Scientific·µò base‚â•2 ‚Üí Scientific base‚â•2
normalize (mkScientific·µò c e) = Sci.normalize c e

toFloat : ‚àÄ{base} {base‚â•2 : base ‚Ñï.‚â• 2} ‚Üí Scientific·µò base‚â•2 ‚Üí Float
toFloat {b} (mkScientific·µò s e) = Flt.from‚Ñ§ s Flt.* Flt.from‚Ñï b Flt.** Flt.from‚Ñ§ e

fromFloat‚Ä≤ : Float ‚Üí Maybe Scientific·µò‚ÇÇ
fromFloat‚Ä≤ = Mb.map (Œª (m , e) ‚Üí mkScientific·µò m e) ‚àò‚Ä≤ Flt.decode

toFloat‚Ä≤ : Scientific·µò‚ÇÇ ‚Üí Maybe Float
toFloat‚Ä≤ (mkScientific·µò m e) = Flt.encode m e

-- todo: arithmetic
-- todo: data Is‚Ñ§ : Scientific ‚Üí Type where
 